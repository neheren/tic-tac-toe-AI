int rectSize = 300;
square squares[] = new square[9];
int board[] = new int[9];
int turn = 1;
boolean keepAnnouncingWinner = false;
int PLAYER_VAL = 1;
int AI_VAL = 2;
int NO_VAL = 0;

void setup() {
  size(600, 600);
  for(int i = 0; i < squares.length; i++){
    squares[i] = new square(i);
  }
}

void draw(){
  background(230,230,230);
  noStroke();
  int rectSize = 300;
  fill(255);
  rect(width/2 - rectSize/2, width/2 - rectSize/2, rectSize, rectSize);
  for(int i = 0; i < squares.length; i++){
    squares[i].Draw();
  }
  
  if(keepAnnouncingWinner){
    annouchWinner();
  }
}

void annouchWinner(){
  if(!keepAnnouncingWinner) keepAnnouncingWinner = true;
  fill(0);
  
  textAlign(CENTER);
  text((turn == AI_VAL) ? "AI" : "Player" + " won!", 300, 100);
}

void switchTurn(){
  if(won(false, false)){
    if(turn == PLAYER_VAL){
      println("PLAYER WON!");
    }
    if(turn == AI_VAL){
      println("AI WON");
    }
  }else{
    if(turn == PLAYER_VAL){
      turn = AI_VAL;
    }else if(turn == AI_VAL){
      turn = PLAYER_VAL;
    }
    
    if(turn == AI_VAL){
      Move chosenAIMove = pickBestChoice(2, AI_VAL);
      squares[chosenAIMove.pos].pick(AI_VAL);
    }
  }
}


void switchTurnAI(){
    if(turn == PLAYER_VAL){
      turn = AI_VAL;
    }else if(turn == AI_VAL){
      turn = PLAYER_VAL;
    }
}


Move pickBestChoice(int movesAhead, int player){
  println("moves ahead_ " + movesAhead);
  ArrayList<Move> possibleMoves = new ArrayList<Move>();

  for(int i = 0; i < 9; i++) {
    delay(1);
    draw();
    if(squares[i].picked == 0) {
      squares[i].picked = turn;
      if(won(true, true)){
        squares[i].picked = 0;
        return new Move(i, turn, (turn == AI_VAL) ? 100 : -100);
      }else{
        if(movesAhead >= 0){
          int nextPlayer = (player == AI_VAL) ? PLAYER_VAL : AI_VAL; 
          possibleMoves.add(new Move(i, turn, pickBestChoice(movesAhead-1, nextPlayer).points));
        }
      }
      squares[i].picked = 0;

    }
    switchTurnAI();
  }
  return moveWithMostPoints(possibleMoves);
}





Move moveWithMostPoints(ArrayList<Move> moves){
  Move chosenMove = new Move(10, 3, -200); //psoudo move with low points
  for(int i = 0; i < moves.size(); i++){
    if(moves.get(i).points > chosenMove.points){
      chosenMove = moves.get(i);
    }
  }
  return chosenMove;
}